# REQUIREMENTS (–≤ requirements.txt):
# pyTelegramBotAPI==4.17.0
# requests==2.32.3
# feedparser==6.0.11

import os, time, math, threading, logging
from datetime import datetime, timedelta, timezone
from collections import deque, defaultdict

import requests
import feedparser
import telebot

# -----------------------------
# 1) ENV –æ—Ç Render (Settings ‚Üí Environment)
# -----------------------------
BOT_TOKEN      = os.getenv("TELEGRAM_BOT_TOKEN", "")
OWNER_CHAT_ID  = int(os.getenv("OWNER_CHAT_ID", "0"))

# –ú–æ–Ω–µ—Ç–∏ –∑–∞ —Å–ª–µ–¥–µ–Ω–µ (Coingecko ids)
COINS = {
    "SHIB":  "shiba-inu",
    "LEASH": "doge-killer",
    "BONE":  "bone-shibaswap",
    "ADA":   "cardano",
    "SNEK":  "snek",  # –∞–∫–æ –≥–æ –Ω—è–º–∞ –≤ Coingecko, –ø—Ä–æ—Å—Ç–æ —â–µ —Å–µ –ø—Ä–æ–ø—É—Å–∫–∞
    # "TREAT": "treat",  # –¥–æ–±–∞–≤–∏ –∞–∫–æ –∏–º–∞ —Ç–æ—á–µ–Ω id –≤ Coingecko
}

# –ü—Ä–∞–≥ –∑–∞ 5-–º–∏–Ω —Å–∏–≥–Ω–∞–ª ¬±X%
PCT_5M_THRESHOLD = float(os.getenv("PCT_5M", "5"))

# –ò–Ω—Ç–µ—Ä–≤–∞–ª–∏
PRICE_POLL_SEC   = int(os.getenv("PRICE_POLL_SEC", "60"))   # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 60 —Å–µ–∫
NEWS_POLL_SEC    = int(os.getenv("NEWS_POLL_SEC", "300"))   # –Ω–æ–≤–∏–Ω–∏ –Ω–∞ 5 –º–∏–Ω

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
bot = telebot.TeleBot(BOT_TOKEN, parse_mode=None)

# -----------------------------
# 2) –ö–µ—à –∑–∞ —Ü–µ–Ω–∏ –∏ –∞–Ω—Ç–∏-—Å–ø–∞–º
# -----------------------------
price_history = {sym: deque(maxlen=15) for sym in COINS}  # ~15 –º–∏–Ω –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏ 60 —Å–µ–∫
last_signal_at = defaultdict(lambda: datetime(1970,1,1, tzinfo=timezone.utc))
MIN_SIG_GAP = timedelta(minutes=10)

# –ù–æ–≤–∏–Ω–∏: –ø–∞–∑–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ –∑–∞–≥–ª–∞–≤–∏—è –∑–∞ –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç
sent_news = deque(maxlen=100)

# -----------------------------
# 3) –ü–æ–º–æ—â–Ω–∏
# -----------------------------
def now_utc():
    return datetime.now(timezone.utc)

def send_denied(chat_id):
    # –∫—Ä–∞—Ç–∫–æ –∏–Ω—Ñ–æ –∑–∞ –Ω–µ–ø–æ–∑–Ω–∞—Ç–∏ —á–∞—Ç–æ–≤–µ
    try:
        bot.send_message(chat_id, "‚ùå –ù—è–º–∞—à –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–æ–∑–∏ –±–æ—Ç.")
    except Exception:
        pass

def safe_send(chat_id, text):
    if chat_id != OWNER_CHAT_ID:
        logging.warning(f"–ë–ª–æ–∫–∏—Ä–∞–Ω–æ -> —á—É–∂–¥ chat_id={chat_id}")
        return
    try:
        bot.send_message(chat_id, text)
    except Exception as e:
        logging.error(f"send_message error: {e}")

def cg_simple_price(ids):
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {"ids": ",".join(ids), "vs_currencies": "usd"}
    r = requests.get(url, params=params, timeout=15)
    r.raise_for_status()
    return r.json()

def cg_market_chart(coin_id, days="1", interval="minute"):
    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart"
    params = {"vs_currency": "usd", "days": days, "interval": interval}
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return r.json().get("prices", [])

def ema(series, period):
    if len(series) < period: return []
    k = 2 / (period + 1)
    out = []
    sma = sum(series[:period]) / period
    out.extend([None]*(period-1))
    out.append(sma)
    prev = sma
    for p in series[period:]:
        val = (p - prev) * k + prev
        out.append(val)
        prev = val
    return out

def rsi(series, period=14):
    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ RSI; –≤—Ä—ä—â–∞ —Å–ø–∏—Å—ä–∫ —Å—ä—Å —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∏ None –∑–∞ –ø—ä—Ä–≤–∏—Ç–µ period –µ–ª–µ–º–µ–Ω—Ç–∞
    if len(series) < period + 1: return []
    gains, losses = [], []
    for i in range(1, period+1):
        ch = series[i] - series[i-1]
        gains.append(max(ch, 0.0))
        losses.append(-min(ch, 0.0))
    avg_gain = sum(gains) / period
    avg_loss = sum(losses) / period
    rsis = [None]*period
    for i in range(period+1, len(series)):
        ch = series[i] - series[i-1]
        gain = max(ch, 0.0)
        loss = -min(ch, 0.0)
        avg_gain = (avg_gain*(period-1) + gain) / period
        avg_loss = (avg_loss*(period-1) + loss) / period
        rs = math.inf if avg_loss == 0 else (avg_gain / avg_loss)
        rsis.append(100 - (100/(1+rs)))
    return rsis

def format_usd(x):
    if x >= 1: return f"${x:,.2f}"
    return f"${x:.8f}".rstrip('0').rstrip('.')

def percent_change(current, old):
    if old == 0: return 0.0
    return (current - old) / old * 100.0

# -----------------------------
# 4) –í—Ö–æ–¥/–ò–∑—Ö–æ–¥ –ª–æ–≥–∏–∫–∞
# -----------------------------
def entry_exit_signal(closes):
    """
    BUY:  EMA20 > EMA50 –∏ RSI(14) –∫—Ä—ä—Å—Ç–æ—Å–≤–∞ –Ω–∞–≥–æ—Ä–µ 30.
    SELL: RSI(14) –∫—Ä—ä—Å—Ç–æ—Å–≤–∞ –Ω–∞–¥–æ–ª—É 70 –∏–ª–∏ close < EMA50.
    """
    if len(closes) < 80:
        return None

    ema20 = ema(closes, 20)
    ema50 = ema(closes, 50)
    r = rsi(closes, 14)

    # –∑–∞—â–∏—Ç–∏ –∑–∞ —Ä—ä–±–æ–≤–µ –ø—Ä–∏ RSI
    if not r or len(r) < 2 or r[-1] is None or r[-2] is None:
        return None

    c = closes[-1]
    e20 = ema20[-1] if ema20 else None
    e50 = ema50[-1] if ema50 else None
    r_last = r[-1]
    r_prev = r[-2]

    # BUY
    if (e20 is not None) and (e50 is not None):
        if e20 > e50 and r_prev < 30 <= r_last:
            return f"üü¢ –í—Ö–æ–¥ (RSI‚Üë>30, EMA20>EMA50) | –¶–µ–Ω–∞: {format_usd(c)}"

    # SELL
    if r_prev > 70 >= r_last:
        return f"üî¥ –ò–∑—Ö–æ–¥ (RSI‚Üì<70) | –¶–µ–Ω–∞: {format_usd(c)}"
    if (e50 is not None) and c < e50:
        return f"üî¥ –ò–∑—Ö–æ–¥ (–ø–æ–¥ EMA50) | –¶–µ–Ω–∞: {format_usd(c)}"

    return None

# -----------------------------
# 5) –¶–µ–Ω–∏ ‚Äì —Ü–∏–∫—ä–ª
# -----------------------------
def prices_loop():
    while True:
        try:
            ids = list(COINS.values())
            if not ids:
                time.sleep(PRICE_POLL_SEC)
                continue

            data = cg_simple_price(ids)
            ts = now_utc()

            for sym, cid in COINS.items():
                price = data.get(cid, {}).get("usd")
                if price is None:
                    logging.warning(f"[{sym}] –Ω—è–º–∞ —Ü–µ–Ω–∞ –æ—Ç Coingecko")
                    continue
                price = float(price)
                price_history[sym].append((ts, price))

                # 5-–º–∏–Ω —Å–∏–≥–Ω–∞–ª
                dq = price_history[sym]
                old = None
                for t0, p0 in dq:
                    if ts - t0 >= timedelta(minutes=5):
                        old = (t0, p0)  # –Ω–∞–π-–±–ª–∏–∑–∫–æ—Ç–æ >=5–º –Ω–∞–∑–∞–¥
                if old:
                    pct = percent_change(price, old[1])
                    if abs(pct) >= PCT_5M_THRESHOLD:
                        key = f"{sym}_pct5m_{'up' if pct>0 else 'down'}"
                        if now_utc() - last_signal_at[key] > MIN_SIG_GAP:
                            arrow = "üü¢" if pct > 0 else "üî¥"
                            safe_send(OWNER_CHAT_ID, f"{arrow} {sym}: {pct:+.2f}% –∑–∞ 5 –º–∏–Ω | –¢–µ–∫—É—â–æ: {format_usd(price)}")
                            last_signal_at[key] = now_utc()

                # –í—Ö–æ–¥/–ò–∑—Ö–æ–¥ —Å–∏–≥–Ω–∞–ª –æ—Ç –º–∏–Ω—É—Ç–Ω–∏ –¥–∞–Ω–Ω–∏ (–ø–æ—Å–ª. 1 –¥–µ–Ω)
                try:
                    prices = cg_market_chart(cid, days="1", interval="minute")
                    closes = [float(x[1]) for x in prices if isinstance(x, (list, tuple)) and len(x) >= 2]
                    sig = entry_exit_signal(closes)
                    if sig:
                        key2 = f"{sym}_ee"
                        if now_utc() - last_signal_at[key2] > MIN_SIG_GAP:
                            safe_send(OWNER_CHAT_ID, f"{sym} | {sig}")
                            last_signal_at[key2] = now_utc()
                except Exception as e:
                    logging.warning(f"EE calc fail {sym}: {e}")

        except Exception as e:
            logging.error(f"prices_loop error: {e}")

        time.sleep(PRICE_POLL_SEC)

# -----------------------------
# 6) –ù–æ–≤–∏–Ω–∏ ‚Äì —Ü–∏–∫—ä–ª (–≤–∞–∂–Ω–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏)
# -----------------------------
NEWS_FEEDS = [
    "https://www.coindesk.com/arc/outboundfeeds/rss/?outputType=xml",
    "https://cointelegraph.com/rss",
]
NEWS_KEYWORDS = [
    "SEC", "ETF", "hack", "exploit", "security breach", "listing",
    "lawsuit", "ban", "regulation", "court", "Fed", "interest rate",
    "Binance", "Coinbase", "BlackRock", "Grayscale", "ETF approval",
    "liquidation", "outage", "fork", "halt",
]

def important_news(title: str) -> bool:
    t = title.lower()
    for k in NEWS_KEYWORDS:
        if k.lower() in t:
            return True
    return False

def news_loop():
    while True:
        try:
            for feed in NEWS_FEEDS:
                d = feedparser.parse(feed)
                for e in d.entries[:10]:
                    title = e.get("title", "")
                    link = e.get("link", "")
                    if not title or not link:
                        continue
                    key = (title.strip(), link.strip())
                    if key in sent_news:
                        continue
                    if important_news(title):
                        safe_send(OWNER_CHAT_ID, f"üì∞ –í–∞–∂–Ω–∞ –Ω–æ–≤–∏–Ω–∞: {title}\n{link}")
                        sent_news.append(key)
        except Exception as e:
            logging.error(f"news_loop error: {e}")

        time.sleep(NEWS_POLL_SEC)

# -----------------------------
# 7) Telegram handlers
# -----------------------------
@bot.message_handler(commands=['start'])
def start_cmd(msg):
    if msg.chat.id != OWNER_CHAT_ID:
        send_denied(msg.chat.id)
        return
    safe_send(msg.chat.id,
        "‚úÖ –ë–æ—Ç—ä—Ç –µ –∞–∫—Ç–∏–≤–µ–Ω.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/id ‚Äì —Ç–≤–æ–µ—Ç–æ chat_id\n"
        "/price <COIN> ‚Äì —Ç–µ–∫—É—â–∞ —Ü–µ–Ω–∞ (–Ω–∞–ø—Ä. /price LEASH)\n"
        "/ping ‚Äì —Ç–µ—Å—Ç\n"
        f"5-–º–∏–Ω —Å–∏–≥–Ω–∞–ª: ¬±{PCT_5M_THRESHOLD}%\n"
        "–°–∏–≥–Ω–∞–ª–∏ –í—Ö–æ–¥/–ò–∑—Ö–æ–¥: RSI/EMA.\n"
        "–ù–æ–≤–∏–Ω–∏: —Ñ–∏–ª—Ç—ä—Ä –ø–æ –≤–∞–∂–Ω–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏."
    )

@bot.message_handler(commands=['id'])
def id_cmd(msg):
    if msg.chat.id != OWNER_CHAT_ID:
        send_denied(msg.chat.id)
        return
    safe_send(msg.chat.id, f"chat_id: {msg.chat.id}")

@bot.message_handler(commands=['ping'])
def ping_cmd(msg):
    if msg.chat.id != OWNER_CHAT_ID:
        send_denied(msg.chat.id)
        return
    safe_send(msg.chat.id, "pong")

@bot.message_handler(commands=['price'])
def price_cmd(msg):
    if msg.chat.id != OWNER_CHAT_ID:
        send_denied(msg.chat.id)
        return
    parts = msg.text.strip().split()
    if len(parts) < 2:
        safe_send(msg.chat.id, "–ò–∑–ø–æ–ª–∑–≤–∞–π: /price COIN (–Ω–∞–ø—Ä. /price LEASH)")
        return
    sym = parts[1].upper()
    cid = COINS.get(sym)
    if not cid:
        safe_send(msg.chat.id, f"–ù–µ–ø–æ–∑–Ω–∞—Ç–∞ –º–æ–Ω–µ—Ç–∞: {sym}")
        return
    try:
        data = cg_simple_price([cid])
        px = float(data[cid]["usd"])
        safe_send(msg.chat.id, f"{sym}: {format_usd(px)}")
    except Exception as e:
        safe_send(msg.chat.id, f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ü–µ–Ω–∞ –∑–∞ {sym}: {e}")

# -----------------------------
# 8) –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ ‚Äì –ø–∞—Ä–∞–ª–µ–ª–Ω–∏ —Ü–∏–∫–ª–∏
# -----------------------------
def run_bot():
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            logging.error(f"polling error: {e}")
            time.sleep(5)

if __name__ == "__main__":
    if not BOT_TOKEN or not OWNER_CHAT_ID:
        raise SystemExit("–õ–∏–ø—Å–≤–∞ TELEGRAM_BOT_TOKEN –∏–ª–∏ OWNER_CHAT_ID –≤ Environment!")
    threading.Thread(target=prices_loop, daemon=True).start()
    threading.Thread(target=news_loop, daemon=True).start()
    logging.info("–ë–æ—Ç—ä—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞ (—Ü–µ–Ω–æ–≤–∏ –∏ –Ω–æ–≤–∏–Ω–∞—Ä—Å–∫–∏ —Ü–∏–∫–ª–∏ –∞–∫—Ç–∏–≤–Ω–∏).")
    run_bot()
